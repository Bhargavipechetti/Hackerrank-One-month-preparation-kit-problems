/**Caesar Cipher**/

def caesarCipher(s, k):
    alpha_lower = "abcdefghijklmnopqrstuvwxyz"
    alpha_upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"

    result = ""

    for letter in s:
        if letter.isupper():
            alphabet = alpha_upper
        else:
            alphabet = alpha_lower

        index = alphabet.find(letter)
        if index >= 0:
            if (index + k)/len(alphabet) < 1:
                result += alphabet[index+k]
            else:
                result += alphabet[(index + k) % len(alphabet)]
        else:
            result += letter
    
    return(result)
    
    
    
    

/**Dynamic Array **/


def dynamicArray(n, queries):
    ans = []
    arr = []
    for _ in range(n):
        arr.append([])
    last_answer = 0
    for q in queries:
        idx = (q[1] ^ last_answer) % n 
        if q[0] == 1:
            arr[idx].append(q[2])
        else:
            last_answer = arr[idx][q[2] % len(arr[idx])]
            ans.append(last_answer)
    return ans
    
    
    


/**Sales by Match**/


class Result {

    public static int sockMerchant(int n, List<Integer> ar) {
    int pairs = 0;
    Collections.sort(ar);

    for(int i = 0; i < n - 1;) {
        if(ar.get(i) == ar.get(i+1)) {
            pairs++;
            i+=2;
        }
        else {
            i++;
        }
    }

    return pairs;
}

}
